---
- name: Install LDAP client packages
  package:
    name: "{{ ldap_packages[ansible_distribution] }}"
  tags:
    - package

- name: Enable dynamic CA in ldap.conf
  lineinfile:
    dest: "{{ ldap_conf[ansible_distribution] }}"
    regexp: (?i)^\s*TLS_CACERT\b
    line: TLS_CACERT {{ ldap_ca_path[ansible_distribution] }}
  tags:
    - config

- name: Configure pam-param LDAP connection
  ini_file:
    dest: "{{ ldap_pam_param_config_file }}"
    section: ldap
    option: "{{ item.0 }}"
    value: "{{ item.1 }}"
  with_together:
    - ['uri', 'binddn', 'bindpw']
    - ["{{ ldap_uri }}", "{{ ldap_dn | default('') }}", "{{ ldap_pw | default('') }}"]
  tags:
    - config

- name: Configure pam-param lookups
  ini_file:
    dest: "{{ ldap_pam_param_config_file }}"
    section: "{{ item[0] }}"
    option: "{{ item[1] }}"
    value: "{{ ldap_lookups[item[0]][item[1]] }}"
  with_nested:
    - ['admin', 'user', 'host', 'membership']
    - ['base', 'scope', 'filter']
  tags:
    - config

- name: Configure pam-param host name shortening
  ini_file:
    dest: "{{ ldap_pam_param_config_file }}"
    section: ""
    option: short_name
    value: "{{ 1 if ldap_pam_param_short_name else 0 }}"
  tags:
    - config

- name: Configure getauthorizedkeys
  template:
    src: getauthorizedkeys.ini.j2
    dest: /etc/getauthorizedkeys.ini
    mode: 0600
    owner: "{{ ldap_sshd_config.AuthorizedKeysCommandUser[ansible_os_family] }}"
  tags:
    - config

- name: Configure SSH to use PAM
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: (?i)^\s*UsePAM\b
    insertafter: (?i)^#\s*UsePAM\b
    line: "UsePAM yes"
  notify: Validate SSH config
  tags:
    - config

- name: Configure SSH with LDAP public keys support
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: (?i)^\s*{{ item.key }}\b
    insertafter: (?i)^#\s*{{ item.key }}\b
    line: "{{ item.key }} {{ item.value[ansible_os_family] }}"
  with_dict: "{{ ldap_sshd_config }}"
  notify: Validate SSH config
  tags:
    - config

- name: Configure LDAP library
  lineinfile:
    dest: "{{ ldap_conf[ansible_distribution] }}"
    regexp: (?i)^\s*{{ item.key }}\b
    line: "{{ item.key }} {{ item.value }}"
  with_dict:
    BASE: "{{ ldap_base }}"
    SASL_NOCANON: "on"
    URI: "{{ ldap_uri }}"
  notify: Restart NSLCD
  tags:
    - config

- name: Configure NSLCD
  template:
    src: nslcd.conf.j2
    dest: /etc/nslcd.conf
    mode: 0600
  notify: Restart NSLCD
  tags:
    - config

- name: Configure sudo LDAP backend
  lineinfile:
    dest: "{{ ldap_sudo_ldap_conf[ansible_distribution] }}"
    create: true
    regexp: (?i)^\s*{{ item.key }}\b
    line: "{{ item.key }} {{ item.value }}"
  with_dict:
    SSL: "on"
    TLS_CACERTFILE: "{{ ldap_ca_path[ansible_distribution] }}"
    URI: "{{ ldap_uri }}"
    SUDOERS_BASE: "{{ ldap_base_sudoers }}"
  tags:
    - config

- name: Configure NSS to use LDAP services
  lineinfile:
    dest: /etc/nsswitch.conf
    regexp: "^{{ item.key }}:"
    line: "{{ item.key }}: {{ item.value | join(' ') }}"
  with_dict:
    passwd: &passwd
      - ldap
      - files
    shadow: *passwd
    netgroup: [ ldap ]
  loop_control:
    label: "{{ item.key }}: {{ item.value | join(' ') }}"
  tags:
    - config

- name: Configure NSS to use LDAP for sudoers
  lineinfile:
    dest: /etc/nsswitch.conf
    regexp: "^sudoers:"
    line: "sudoers: ldap files"
  when: ldap_sudoers
  tags:
    - config

- name: Enable NSLCD service
  service:
    name: nslcd
    enabled: true
    state: started

- include_tasks: pam.{{ ansible_os_family }}.yml
  tags:
    - config
